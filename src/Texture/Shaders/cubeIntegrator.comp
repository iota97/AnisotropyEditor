#version 440

layout (binding = 0) uniform samplerCube inCube;
layout (binding = 1, rgba16f) uniform coherent image2DArray outCube;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float geometryVCavity(vec3 H, vec3 L, vec3 V)
{
    float G1wowh = min(1.0, 2.0 * H.z * V.z / dot(V, H));
    float G1wiwh = min(1.0, 2.0 * H.z * L.z / dot(L, H));
    return G1wowh * G1wiwh;
}

void main()
{
    vec3 N = normalize(vec3(vec2(gl_GlobalInvocationID.xy+0.5)/(imageSize(outCube).xy)*2-1, 1));
    vec3 R = N;
    vec3 V = R;

    float outLod = log2(textureSize(inCube, 0).x/imageSize(outCube).x);
    float roughness = outLod/log2(textureSize(inCube, 0).x);

    mat3 M[6];
    M[0] = mat3(vec3(0, 0, -1), vec3(0, -1, 0), vec3(1, 0, 0));
    M[1] = mat3(vec3(0, 0,  1), vec3(0, -1, 0), vec3(-1, 0, 0));
    M[2] = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, 1, 0));
    M[3] = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, -1, 0));
    M[4] = mat3(vec3(1, 0, 0), vec3(0, -1, 0), vec3(0, 0, 1));
    M[5] = mat3(vec3(-1, 0, 0), vec3(0, -1, 0), vec3(0, 0, -1));

    for (int f = 0; f < 6; ++f) {
        const uint SAMPLE_COUNT = 1024u;
        float totalWeight = 0.0;
        vec3 prefilteredColor = vec3(0.0);

        for (uint i = 0u; i < SAMPLE_COUNT; ++i) {
            vec2 Xi = Hammersley(i, SAMPLE_COUNT);
            vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if (NdotL > 0.0) {
                float D = DistributionGGX(N, H, roughness);
                float NdotH = max(dot(N, H), 0.0);
                float HdotV = max(dot(H, V), 0.0);
                float pdf = (D * NdotH / (4.0 * HdotV)) + 0.0001;

                float resolution = textureSize(inCube, 0).x;
                float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
                float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

                float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
                prefilteredColor += textureLod(inCube, M[f]*L, mipLevel).rgb * NdotL;
                totalWeight      += NdotL;
            }
        }
        prefilteredColor = prefilteredColor / totalWeight;

        imageStore(outCube, ivec3(gl_GlobalInvocationID.xy, f), vec4(prefilteredColor, 1.0));
    }
}
